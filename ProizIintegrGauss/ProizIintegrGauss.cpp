// ProizIintegrGauss.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//
#include <iostream>
#include <cmath>
const int n = 3;
const int N = 111;

using namespace std;

double f(double x) {
    // задаем заранее функцию с которой будем производить вычисления
    return sin(x);
}

double OdnostorRazn(double x, double h) {
    double ch = f(x + h) - f(x); //Используем формулу односторонней разности для вычисления производной функции в точке x.
    double zn = h;
    return ch / zn;
}

double Gauss(double a, double b)
{


    double ra=(b-a)/2;
    double su=(a+b)/2;
    double f1, f2, S = 0.0;
    f1 = f(su - ra / sqrt(3));
    f2 = f(su + ra / sqrt(3));
    S = f1 + f2;
    return ra * S;
}

int main() {
    setlocale(LC_ALL, "Russian");
    int r;
    double result;
    cout << "Выберете необходимый режим: 1 - вычисление производной. 2 - вычисление интегралла  ";
    cin >> r;
   switch (r) {
   case 1:
       double x; // точка, в которой вычисляем производную
       double h; // шаг
       cout << "Введите точку для вычисления производной:  ";
       cin >> x;
       cout << "Введите шаг для вычисления производной:  ";
       cin >> h;
       result = OdnostorRazn(x, h);
       cout << "Производная функции в точке " << x << " равна " << result << endl;
       return 0;
       break;
   case 2:
   {double a;
   double b;
   double sum = 0.0;
   cout << "Введите точку начала интервала интегрирования:  ";
   cin >> a;
   cout << "Введите точку конца интервала интегрирования:  ";
   cin >> b;
   for (int i = 0; i < N; ++i)
   {
       sum += Gauss(a + i * (b - a) / N, a + (i + 1) * (b - a) / N);
   }
   cout << "Интегралл равен = " << sum << endl; }
       break;
   
   default:
       cout << "Введен неправильный режим работы, выберите режим работы программы(1,2)" << endl;
       main();
       break;
   }
   return 0;
}
// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
